!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="/game-enter/",n(n.s=9)}([function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(2);r.colors=["white","black"],r.invRanks=[8,7,6,5,4,3,2,1],r.allKeys=(o=Array.prototype).concat.apply(o,t.files.map(function(e){return t.ranks.map(function(r){return e+r})})),r.pos2key=function(e){return r.allKeys[8*e[0]+e[1]-9]},r.key2pos=function(e){return[e.charCodeAt(0)-96,e.charCodeAt(1)-48]},r.memo=function(e){var r,n=function(){return void 0===r&&(r=e()),r};return n.clear=function(){r=void 0},n},r.timer=function(){var e;return{start:function(){e=Date.now()},cancel:function(){e=void 0},stop:function(){if(!e)return 0;var r=Date.now()-e;return e=void 0,r}}},r.opposite=function(e){return"white"===e?"black":"white"},r.containsX=function(e,r){return void 0!==e&&-1!==e.indexOf(r)},r.distanceSq=function(e,r){return Math.pow(e[0]-r[0],2)+Math.pow(e[1]-r[1],2)},r.samePiece=function(e,r){return e.role===r.role&&e.color===r.color},r.computeIsTrident=function(){return window.navigator.userAgent.indexOf("Trident/")>-1};var o,i=function(e,r,n,t){return[(r?e[0]-1:8-e[0])*n,(r?8-e[1]:e[1]-1)*t]};r.posToTranslateAbs=function(e){var r=e.width/8,n=e.height/8;return function(e,t){return i(e,t,r,n)}},r.posToTranslateRel=function(e,r){return i(e,r,12.5,12.5)},r.translateAbs=function(e,r){e.style.transform="translate("+r[0]+"px,"+r[1]+"px)"},r.translateRel=function(e,r){e.style.left=r[0]+"%",e.style.top=r[1]+"%"},r.setVisible=function(e,r){e.style.visibility=r?"visible":"hidden"},r.eventPosition=function(e){return e.clientX||0===e.clientX?[e.clientX,e.clientY]:e.touches&&e.targetTouches[0]?[e.targetTouches[0].clientX,e.targetTouches[0].clientY]:void 0},r.isRightButton=function(e){return 2===e.buttons||2===e.button},r.createEl=function(e,r){var n=document.createElement(e);return r&&(n.className=r),n},r.raf=(window.requestAnimationFrame||window.setTimeout).bind(window)},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0),o=n(20);function i(e){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e&&setTimeout(function(){return e.apply(void 0,r)},1)}function a(e){e.premovable.current&&(e.premovable.current=void 0,i(e.premovable.events.unset))}function c(e){var r=e.predroppable;r.current&&(r.current=void 0,i(r.events.unset))}function u(e,r,n){if(r===n||!e.pieces[r])return!1;var o=e.pieces[n]&&e.pieces[n].color!==e.pieces[r].color?e.pieces[n]:void 0;return n==e.selected&&p(e),i(e.events.move,r,n,o),function(e,r,n){if(!e.autoCastle)return!1;var o=e.pieces[r];if("king"!==o.role)return!1;var i=t.key2pos(r);if(5!==i[0])return!1;if(1!==i[1]&&8!==i[1])return!1;var a,c,u,s=t.key2pos(n);if(7===s[0]||8===s[0])a=t.pos2key([8,i[1]]),c=t.pos2key([6,i[1]]),u=t.pos2key([7,i[1]]);else{if(3!==s[0]&&1!==s[0])return!1;a=t.pos2key([1,i[1]]),c=t.pos2key([4,i[1]]),u=t.pos2key([3,i[1]])}var l=e.pieces[a];return"rook"===l.role&&(delete e.pieces[r],delete e.pieces[a],e.pieces[u]=o,e.pieces[c]=l,!0)}(e,r,n)||(e.pieces[n]=e.pieces[r],delete e.pieces[r]),e.lastMove=[r,n],e.check=void 0,i(e.events.change),o||!0}function s(e,r,n,o){if(e.pieces[n]){if(!o)return!1;delete e.pieces[n]}return i(e.events.dropNewPiece,r,n),e.pieces[n]=r,e.lastMove=[n],e.check=void 0,i(e.events.change),e.movable.dests=void 0,e.turnColor=t.opposite(e.turnColor),!0}function l(e,r,n){var o=u(e,r,n);return o&&(e.movable.dests=void 0,e.turnColor=t.opposite(e.turnColor),e.animation.current=void 0),o}function f(e,r,n){if(g(e,r,n)){var a=l(e,r,n);if(a){var u=e.hold.stop();p(e);var s={premove:!1,ctrlKey:e.stats.ctrlKey,holdTime:u};return!0!==a&&(s.captured=a),i(e.movable.events.after,r,n,s),!0}}else!function(e,r,n){return r!==n&&h(e,r)&&t.containsX(o.default(e.pieces,r,e.premovable.castle),n)}(e,r,n)?v(e,n)||h(e,n)?(d(e,n),e.hold.start()):p(e):(!function(e,r,n,t){c(e),e.premovable.current=[r,n],i(e.premovable.events.set,r,n,t)}(e,r,n,{ctrlKey:e.stats.ctrlKey}),p(e));return!1}function d(e,r){e.selected=r,h(e,r)?e.premovable.dests=o.default(e.pieces,r,e.premovable.castle):e.premovable.dests=void 0}function p(e){e.selected=void 0,e.premovable.dests=void 0,e.hold.cancel()}function v(e,r){var n=e.pieces[r];return n&&("both"===e.movable.color||e.movable.color===n.color&&e.turnColor===n.color)}function g(e,r,n){return r!==n&&v(e,r)&&(e.movable.free||!!e.movable.dests&&t.containsX(e.movable.dests[r],n))}function h(e,r){var n=e.pieces[r];return n&&e.premovable.enabled&&e.movable.color===n.color&&e.turnColor!==n.color}function b(e){a(e),c(e),p(e)}r.callUserFunction=i,r.toggleOrientation=function(e){e.orientation=t.opposite(e.orientation),e.animation.current=e.draggable.current=e.selected=void 0},r.reset=function(e){e.lastMove=void 0,p(e),a(e),c(e)},r.setPieces=function(e,r){for(var n in r){var t=r[n];t?e.pieces[n]=t:delete e.pieces[n]}},r.setCheck=function(e,r){if(!0===r&&(r=e.turnColor),r)for(var n in e.pieces)"king"===e.pieces[n].role&&e.pieces[n].color===r&&(e.check=n);else e.check=void 0},r.unsetPremove=a,r.unsetPredrop=c,r.baseMove=u,r.baseNewPiece=s,r.userMove=f,r.dropNewPiece=function(e,r,n,t){if(function(e,r,n){var t=e.pieces[r];return t&&n&&(r===n||!e.pieces[n])&&("both"===e.movable.color||e.movable.color===t.color&&e.turnColor===t.color)}(e,r,n)||t){var o=e.pieces[r];delete e.pieces[r],s(e,o,n,t),i(e.movable.events.afterNewPiece,o.role,n,{predrop:!1})}else!function(e,r,n){var t=e.pieces[r];return t&&n&&(!e.pieces[n]||e.pieces[n].color!==e.movable.color)&&e.predroppable.enabled&&("pawn"!==t.role||"1"!==n[1]&&"8"!==n[1])&&e.movable.color===t.color&&e.turnColor!==t.color}(e,r,n)?(a(e),c(e)):function(e,r,n){a(e),e.predroppable.current={role:r,key:n},i(e.predroppable.events.set,r,n)}(e,e.pieces[r].role,n);delete e.pieces[r],p(e)},r.selectSquare=function(e,r,n){e.selected?e.selected!==r||e.draggable.enabled?(e.selectable.enabled||n)&&e.selected!==r?f(e,e.selected,r)&&(e.stats.dragged=!1):e.hold.start():(p(e),e.hold.cancel()):(v(e,r)||h(e,r))&&(d(e,r),e.hold.start()),i(e.events.select,r)},r.setSelected=d,r.unselect=p,r.canMove=g,r.isDraggable=function(e,r){var n=e.pieces[r];return n&&e.draggable.enabled&&("both"===e.movable.color||e.movable.color===n.color&&(e.turnColor===n.color||e.premovable.enabled))},r.playPremove=function(e){var r=e.premovable.current;if(!r)return!1;var n=r[0],t=r[1],o=!1;if(g(e,n,t)){var c=l(e,n,t);if(c){var u={premove:!0};!0!==c&&(u.captured=c),i(e.movable.events.after,n,t,u),o=!0}}return a(e),o},r.playPredrop=function(e,r){var n=e.predroppable.current,t=!1;return!!n&&(r(n)&&s(e,{role:n.role,color:e.movable.color},n.key)&&(i(e.movable.events.afterNewPiece,n.role,n.key,{predrop:!0}),t=!0),c(e),t)},r.cancelMove=b,r.stop=function(e){e.movable.color=e.movable.dests=e.animation.current=void 0,b(e)},r.getKeyAtDomPos=function(e,r,n){var o=Math.ceil((e[0]-n.left)/n.width*8);r||(o=9-o);var i=Math.ceil(8-(e[1]-n.top)/n.height*8);return r||(i=9-i),o>0&&o<9&&i>0&&i<9?t.pos2key([o,i]):void 0}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.files=["a","b","c","d","e","f","g","h"],r.ranks=[1,2,3,4,5,6,7,8]},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0),o=n(2);r.initial="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR";var i={p:"pawn",r:"rook",n:"knight",b:"bishop",q:"queen",k:"king"},a={pawn:"p",rook:"r",knight:"n",bishop:"b",queen:"q",king:"k"};r.read=function(e){"start"===e&&(e=r.initial);for(var n={},o=8,a=0,c=0,u=e;c<u.length;c++){var s=u[c];switch(s){case" ":return n;case"/":if(0==--o)return n;a=0;break;case"~":n[t.pos2key([a,o])].promoted=!0;break;default:var l=s.charCodeAt(0);if(l<57)a+=l-48;else{++a;var f=s.toLowerCase();n[t.pos2key([a,o])]={role:i[f],color:s===f?"black":"white"}}}}return n},r.write=function(e){var r,n;return t.invRanks.map(function(i){return o.ranks.map(function(o){return(r=e[t.pos2key([o,i])])?(n=a[r.role],"white"===r.color?n.toUpperCase():n):"1"}).join("")}).join("/").replace(/1{2,}/g,function(e){return e.length.toString()})}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(1),o=n(3);function i(e){return"object"==typeof e}r.configure=function(e,r){if(r.movable&&r.movable.dests&&(e.movable.dests=void 0),function e(r,n){for(var t in n)i(r[t])&&i(n[t])?e(r[t],n[t]):r[t]=n[t]}(e,r),r.fen&&(e.pieces=o.read(r.fen),e.drawable.shapes=[]),r.hasOwnProperty("check")&&t.setCheck(e,r.check||!1),r.hasOwnProperty("lastMove")&&!r.lastMove?e.lastMove=void 0:r.lastMove&&(e.lastMove=r.lastMove),e.selected&&t.setSelected(e,e.selected),(!e.animation.duration||e.animation.duration<100)&&(e.animation.enabled=!1),!e.movable.rookCastle&&e.movable.dests){var n="white"===e.movable.color?1:8,a="e"+n,c=e.movable.dests[a];if(!c||"king"!==e.pieces[a].role)return;e.movable.dests[a]=c.filter(function(e){return!(e==="a"+n&&-1!==c.indexOf("c"+n)||e==="h"+n&&-1!==c.indexOf("g"+n))})}}},function(e,r,n){"use strict";var t=this&&this.__assign||Object.assign||function(e){for(var r,n=1,t=arguments.length;n<t;n++)for(var o in r=arguments[n])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e};Object.defineProperty(r,"__esModule",{value:!0});var o=n(0);function i(e,r){var n=e(r);return r.dom.redraw(),n}function a(e,r){return{key:e,pos:o.key2pos(e),piece:r}}r.anim=function(e,r){return r.animation.enabled?function(e,r){var n=t({},r.pieces),i=e(r),s=function(e,r){var n,t,i,c,u={},s=[],l={},f=[],d=[],p={};for(i in e)p[i]=a(i,e[i]);for(var v=0,g=o.allKeys;v<g.length;v++){var h=g[v];n=r.pieces[h],t=p[h],n?t?o.samePiece(n,t.piece)||(f.push(t),d.push(a(h,n))):d.push(a(h,n)):t&&f.push(t)}return d.forEach(function(e){(t=function(e,r){return r.sort(function(r,n){return o.distanceSq(e.pos,r.pos)-o.distanceSq(e.pos,n.pos)})[0]}(e,f.filter(function(r){return o.samePiece(e.piece,r.piece)})))&&(c=[t.pos[0]-e.pos[0],t.pos[1]-e.pos[1]],u[e.key]=c.concat(c),s.push(t.key))}),f.forEach(function(e){o.containsX(s,e.key)||r.items&&r.items(e.pos,e.key)||(l[e.key]=e.piece)}),{anims:u,fadings:l}}(n,r);if(u(s.anims)&&u(s.fadings))r.dom.redraw();else{var l=r.animation.current&&r.animation.current.start;r.animation.current={start:c.now(),frequency:1/r.animation.duration,plan:s},l||function e(r,n){var t=r.animation.current;if(void 0!==t){var i=1-(n-t.start)*t.frequency;if(i<=0)r.animation.current=void 0,r.dom.redrawNow();else{var a=function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1}(i);for(var u in t.plan.anims){var s=t.plan.anims[u];s[2]=s[0]*a,s[3]=s[1]*a}r.dom.redrawNow(!0),o.raf(function(n){return void 0===n&&(n=c.now()),e(r,n)})}}else r.dom.destroyed||r.dom.redrawNow()}(r,c.now())}return i}(e,r):i(e,r)},r.render=i;var c=void 0!==window.performance?window.performance:Date;function u(e){for(var r in e)return!1;return!0}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(1),o=n(0),i=n(7),a=n(5);function c(e){o.raf(function(){var r=e.draggable.current;if(r){e.animation.current&&e.animation.current.plan.anims[r.orig]&&(e.animation.current=void 0);var n=e.pieces[r.orig];if(n&&o.samePiece(n,r.piece)){if(!r.started&&o.distanceSq(r.epos,r.rel)>=Math.pow(e.draggable.distance,2)&&(r.started=!0),r.started){if("function"==typeof r.element){var t=r.element();if(!t)return;r.element=t,r.element.cgDragging=!0,r.element.classList.add("dragging")}var i="white"===e.orientation,a=e.dom.bounds();r.pos=[r.epos[0]-r.rel[0],r.epos[1]-r.rel[1]];var s=o.posToTranslateAbs(a)(r.origPos,i);s[0]+=r.pos[0]+r.dec[0],s[1]+=r.pos[1]+r.dec[1],o.translateAbs(r.element,s)}}else u(e);c(e)}})}function u(e){var r=e.draggable.current;r&&(r.newPiece&&delete e.pieces[r.orig],e.draggable.current=void 0,t.unselect(e),s(e),e.dom.redraw())}function s(e){var r=e.dom.elements;r.ghost&&o.setVisible(r.ghost,!1)}function l(e,r,n){var t=o.key2pos(e);return r||(t[0]=9-t[0],t[1]=9-t[1]),{left:n.left+n.width*(t[0]-1)/8,top:n.top+n.height*(8-t[1])/8,width:n.width/8,height:n.height/8}}function f(e,r){for(var n=e.dom.elements.board.firstChild;n;){if(n.cgKey===r&&"PIECE"===n.tagName)return n;n=n.nextSibling}}r.start=function(e,r){if(!(void 0!==r.button&&0!==r.button||r.touches&&r.touches.length>1)){r.preventDefault();var n="white"===e.orientation,u=e.dom.bounds(),s=o.eventPosition(r),d=t.getKeyAtDomPos(s,n,u);if(d){var p=e.pieces[d],v=e.selected;v||!e.drawable.enabled||!e.drawable.eraseOnClick&&p&&p.color===e.turnColor||i.clear(e);var g=!!e.premovable.current,h=!!e.predroppable.current;e.stats.ctrlKey=r.ctrlKey,e.selected&&t.canMove(e,e.selected,d)?a.anim(function(e){return t.selectSquare(e,d)},e):t.selectSquare(e,d);var b=e.selected===d,m=f(e,d);if(p&&m&&b&&t.isDraggable(e,d)){var y=l(d,n,u);e.draggable.current={orig:d,origPos:o.key2pos(d),piece:p,rel:s,epos:s,pos:[0,0],dec:e.draggable.centerPiece?[s[0]-(y.left+y.width/2),s[1]-(y.top+y.height/2)]:[0,0],started:e.draggable.autoDistance&&e.stats.dragged,element:m,previouslySelected:v,originTarget:r.target},m.cgDragging=!0,m.classList.add("dragging");var w=e.dom.elements.ghost;w&&(w.className="ghost "+p.color+" "+p.role,o.translateAbs(w,o.posToTranslateAbs(u)(o.key2pos(d),n)),o.setVisible(w,!0)),c(e)}else g&&t.unsetPremove(e),h&&t.unsetPredrop(e);e.dom.redraw()}}},r.dragNewPiece=function(e,r,n,t){e.pieces.a0=r,e.dom.redraw();var i=o.eventPosition(n),a="white"===e.orientation,u=e.dom.bounds(),s=l("a0",a,u),d=[(a?0:7)*s.width+u.left,(a?8:-1)*s.height+u.top];e.draggable.current={orig:"a0",origPos:o.key2pos("a0"),piece:r,rel:d,epos:i,pos:[i[0]-d[0],i[1]-d[1]],dec:[-s.width/2,-s.height/2],started:!0,element:function(){return f(e,"a0")},originTarget:n.target,newPiece:!0,force:t||!1},c(e)},r.move=function(e,r){e.draggable.current&&(!r.touches||r.touches.length<2)&&(e.draggable.current.epos=o.eventPosition(r))},r.end=function(e,r){var n=e.draggable.current;if(n)if("touchend"!==r.type||!n||n.originTarget===r.target||n.newPiece){t.unsetPremove(e),t.unsetPredrop(e);var i=o.eventPosition(r)||n.epos,a=t.getKeyAtDomPos(i,"white"===e.orientation,e.dom.bounds());a&&n.started?n.newPiece?t.dropNewPiece(e,n.orig,a,n.force):(e.stats.ctrlKey=r.ctrlKey,t.userMove(e,n.orig,a)&&(e.stats.dragged=!0)):n.newPiece?delete e.pieces[n.orig]:e.draggable.deleteOnDropOff&&(delete e.pieces[n.orig],t.callUserFunction(e.events.change)),(!n||n.orig!==n.previouslySelected||n.orig!==a&&a)&&e.selectable.enabled||t.unselect(e),s(e),e.draggable.current=void 0,e.dom.redraw()}else e.draggable.current=void 0},r.cancel=u},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(1),o=n(0),i=["green","red","blue","yellow"];function a(e){o.raf(function(){var r=e.drawable.current;if(r){var n=t.getKeyAtDomPos(r.pos,"white"===e.orientation,e.dom.bounds());n!==r.mouseSq&&(r.mouseSq=n,r.dest=n!==r.orig?n:void 0,e.dom.redrawNow()),a(e)}})}function c(e){e.drawable.current&&(e.drawable.current=void 0,e.dom.redraw())}function u(e){e.onChange&&e.onChange(e.shapes)}r.start=function(e,r){if(!(r.touches&&r.touches.length>1)){r.stopPropagation(),r.preventDefault(),r.ctrlKey?t.unselect(e):t.cancelMove(e);var n=o.eventPosition(r),c=t.getKeyAtDomPos(n,"white"===e.orientation,e.dom.bounds());c&&(e.drawable.current={orig:c,pos:n,brush:function(e){var r=e.shiftKey&&o.isRightButton(e)?1:0,n=e.altKey?2:0;return i[r+n]}(r)},a(e))}},r.processDraw=a,r.move=function(e,r){e.drawable.current&&(e.drawable.current.pos=o.eventPosition(r))},r.end=function(e){var r=e.drawable.current;r&&(r.mouseSq&&function(e,r){var n=function(e){return e.orig===r.orig&&e.dest===r.dest},t=e.shapes.filter(n)[0];t&&(e.shapes=e.shapes.filter(function(e){return function(r){return!e(r)}}(n))),t&&t.brush===r.brush||e.shapes.push(r),u(e)}(e.drawable,r),c(e))},r.cancel=c,r.clear=function(e){e.drawable.shapes.length&&(e.drawable.shapes=[],e.dom.redraw(),u(e.drawable))}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t,o=n(0);function i(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function a(e,r,n){var t=e.orig,o=e.dest,i=e.brush,a=e.piece,c=e.modifiers;return[n,t,o,i,o&&r[o]>1,a&&function(e){return[e.color,e.role,e.scale].filter(function(e){return e}).join("")}(a),c&&function(e){return""+(e.lineWidth||"")}(c)].filter(function(e){return e}).join("")}function c(e){var r=u(i("marker"),{id:"arrowhead-"+e.key,orient:"auto",markerWidth:4,markerHeight:8,refX:2.05,refY:2.01});return r.appendChild(u(i("path"),{d:"M0,0 V4 L3,2 Z",fill:e.color})),r.setAttribute("cgKey",e.key),r}function u(e,r){for(var n in r)e.setAttribute(n,r[n]);return e}function s(e,r){return"white"===r?e:[9-e[0],9-e[1]]}function l(e,r){var n={color:e.color,opacity:Math.round(10*e.opacity)/10,lineWidth:Math.round(r.lineWidth||e.lineWidth)};return n.key=[e.key,r.lineWidth].filter(function(e){return e}).join(""),n}function f(e,r){return(e.opacity||1)*(r?.9:1)}function d(e,r){return[(e[0]-.5)*r.width/8,(8.5-e[1])*r.height/8]}r.createElement=i,r.renderSvg=function(e,r){var n=e.drawable,p=n.current,v=p&&p.mouseSq?p:void 0,g={};n.shapes.concat(n.autoShapes).concat(v?[v]:[]).forEach(function(e){e.dest&&(g[e.dest]=(g[e.dest]||0)+1)});var h=n.shapes.concat(n.autoShapes).map(function(e){return{shape:e,current:!1,hash:a(e,g,!1)}});v&&h.push({shape:v,current:!0,hash:a(v,g,!0)});var b=h.map(function(e){return e.hash}).join("");if(b!==e.drawable.prevSvgHash){e.drawable.prevSvgHash=b;var m=r.firstChild;!function(e,r,n){var t,o={};r.forEach(function(r){r.shape.dest&&(t=e.brushes[r.shape.brush],r.shape.modifiers&&(t=l(t,r.shape.modifiers)),o[t.key]=t)});for(var i={},a=n.firstChild;a;)i[a.getAttribute("cgKey")]=!0,a=a.nextSibling;for(var u in o)i[u]||n.appendChild(c(o[u]))}(n,h,m),function(e,r,n,a,c,p){void 0===t&&(t=o.computeIsTrident());var v=e.dom.bounds(),g={},h=[];r.forEach(function(e){g[e.hash]=!1});for(var b,m=p.nextSibling;m;)b=m.getAttribute("cgHash"),g.hasOwnProperty(b)?g[b]=!0:h.push(m),m=m.nextSibling;h.forEach(function(e){return c.removeChild(e)}),r.forEach(function(r){g[r.hash]||c.appendChild(function(e,r,n,a,c){var p,v=r.shape,g=r.current,h=r.hash;if(v.piece)p=function(e,r,n,t){var o=d(r,t),a=t.width/8*(n.scale||1),c=n.color[0]+("knight"===n.role?"n":n.role[0]).toUpperCase();return u(i("image"),{className:n.role+" "+n.color,x:o[0]-a/2,y:o[1]-a/2,width:a,height:a,href:e+c+".svg"})}(e.drawable.pieces.baseUrl,s(o.key2pos(v.orig),e.orientation),v.piece,c);else{var b=s(o.key2pos(v.orig),e.orientation);if(v.orig&&v.dest){var m=n[v.brush];v.modifiers&&(m=l(m,v.modifiers)),p=function(e,r,n,o,a,c){var s=function(e,r){return t?0:(r?20:10)/512*e.width}(c,a&&!o),l=d(r,c),p=d(n,c),v=p[0]-l[0],g=p[1]-l[1],h=Math.atan2(g,v),b=Math.cos(h)*s,m=Math.sin(h)*s;return u(i("line"),{stroke:e.color,"stroke-width":function(e,r,n){return(e.lineWidth||10)*(r?.85:1)/512*n.width}(e,o,c),"stroke-linecap":"round","marker-end":t?void 0:"url(#arrowhead-"+e.key+")",opacity:f(e,o),x1:l[0],y1:l[1],x2:p[0]-b,y2:p[1]-m})}(m,b,s(o.key2pos(v.dest),e.orientation),g,a[v.dest]>1,c)}else p=function(e,r,n,t){var o=d(r,t),a=function(e){var r=e.width/512;return[3*r,4*r]}(t),c=(t.width+t.height)/32;return u(i("circle"),{stroke:e.color,"stroke-width":a[n?0:1],fill:"none",opacity:f(e,n),cx:o[0],cy:o[1],r:c-a[1]/2})}(n[v.brush],b,g,c)}return p.setAttribute("cgHash",h),p}(e,r,n,a,v))})}(e,h,n.brushes,g,r,m)}}},function(e,r,n){"use strict";r.__esModule=!0,n(10),n(12),n(14),n(16);var t=n(18),o=n(26);function i(e){var r={};return e.SQUARES.forEach(function(n){var t=e.moves({square:n,verbose:!0});t.length&&(r[n]=t.map(function(e){return e.to}))}),r}function a(e){return"w"===e.turn()?"white":"black"}function c(e,r){return function(n,t,o){var c={from:n,to:t};if(("w"==r.turn()&&t.endsWith("8")||"b"==r.turn()&&t.endsWith("1"))&&"pawn"==p.state.pieces[t].role){var u=window.prompt("Write the selected piece (n,b,r or q)","q");c.promotion=u}r.move(c),p.set({fen:r.fen()}),s(),e.set({turnColor:a(r),movable:{color:a(r),dests:i(r)}})}}function u(e,r){s(),e.set({turnColor:a(r),movable:{color:a(r),dests:i(r)}})}function s(){document.getElementById("pgn").innerHTML=f.pgn()}r.toDests=i,r.toColor=a,r.playOtherSide=c,r.changeBackorNext=u,r.rewritePgn=s;var l=document.getElementById("ground1"),f=new o,d=[],p=t.Chessground(l,{movable:{color:"white",free:!1,dests:i(f)}});p.set({movable:{events:{after:c(p,f)}}}),document.getElementById("next").addEventListener("click",function(e){var r=d.pop();f.move(r),p.set({fen:f.fen()}),u(p,f)}),document.getElementById("back").addEventListener("click",function(e){var r=f.undo();d.push(r),p.set({fen:f.fen()}),u(p,f)}),document.getElementById("restart").addEventListener("click",function(e){document.location.reload()}),document.getElementById("pgn-upload-button").addEventListener("click",function(e){var r=document.getElementById("pgn-upload");f.reset(),f.load_pgn(r.value),r.value="",window.alert("PGN loaded");var n=document.getElementById("white-player"),t=document.getElementById("black-player");n.innerText=f.header().White,t.innerText=f.header().Black,function(){var e=f.header().Date;e.startsWith("[Date")&&(e=e.replace('[Date "',"").replace('" ]',""),f.header("Date",e))}()}),document.getElementById("result-white").addEventListener("click",function(){f.header("Result","1-0"),s()}),document.getElementById("result-black").addEventListener("click",function(){f.header("Result","0-1"),s()}),document.getElementById("result-draw").addEventListener("click",function(){f.header("Result","1/2-1/2"),s()})},function(e,r,n){},,function(e,r,n){},,function(e,r,n){},,function(e,r,n){},,function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(19),o=n(4),i=n(22),a=n(23),c=n(24),u=n(25),s=n(8),l=n(0);r.Chessground=function(e,r){var n=i.defaults();function f(){var r=n.dom&&n.dom.unbind;e.classList.add("cg-board-wrap");var t=l.memo(function(){return e.getBoundingClientRect()}),o=n.viewOnly&&!n.drawable.visible,i=a.default(e,n,o?void 0:t()),d=function(e){u.default(n),!e&&i.svg&&s.renderSvg(n,i.svg)};n.dom={elements:i,bounds:t,redraw:function(e){var r=!1;return function(){r||(r=!0,l.raf(function(){e(),r=!1}))}}(d),redrawNow:d,unbind:r,relative:o},n.drawable.prevSvgHash="",d(!1),c.bindBoard(n),r||(n.dom.unbind=c.bindDocument(n,f))}return o.configure(n,r||{}),f(),t.start(n,f)}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(1),o=n(3),i=n(4),a=n(5),c=n(6),u=n(21);r.start=function(e,r){function n(){t.toggleOrientation(e),r()}return{set:function(r){r.orientation&&r.orientation!==e.orientation&&n(),(r.fen?a.anim:a.render)(function(e){return i.configure(e,r)},e)},state:e,getFen:function(){return o.write(e.pieces)},toggleOrientation:n,setPieces:function(r){a.anim(function(e){return t.setPieces(e,r)},e)},selectSquare:function(r,n){r?a.anim(function(e){return t.selectSquare(e,r,n)},e):e.selected&&(t.unselect(e),e.dom.redraw())},move:function(r,n){a.anim(function(e){return t.baseMove(e,r,n)},e)},newPiece:function(r,n){a.anim(function(e){return t.baseNewPiece(e,r,n)},e)},playPremove:function(){if(e.premovable.current){if(a.anim(t.playPremove,e))return!0;e.dom.redraw()}return!1},playPredrop:function(r){if(e.predroppable.current){var n=t.playPredrop(e,r);return e.dom.redraw(),n}return!1},cancelPremove:function(){a.render(t.unsetPremove,e)},cancelPredrop:function(){a.render(t.unsetPredrop,e)},cancelMove:function(){a.render(function(e){t.cancelMove(e),c.cancel(e)},e)},stop:function(){a.render(function(e){t.stop(e),c.cancel(e)},e)},explode:function(r){u.default(e,r)},setAutoShapes:function(r){a.render(function(e){return e.drawable.autoShapes=r},e)},setShapes:function(r){a.render(function(e){return e.drawable.shapes=r},e)},getKeyAtDomPos:function(r){return t.getKeyAtDomPos(r,"white"===e.orientation,e.dom.bounds())},redrawAll:r,dragNewPiece:function(r,n,t){c.dragNewPiece(e,r,n,t)},destroy:function(){t.stop(e),e.dom.unbind&&e.dom.unbind(),e.dom.destroyed=!0}}}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0);function o(e,r){return Math.abs(e-r)}var i=function(e,r,n,t){var i=o(e,n),a=o(r,t);return 1===i&&2===a||2===i&&1===a},a=function(e,r,n,t){return o(e,n)===o(r,t)},c=function(e,r,n,t){return e===n||r===t},u=function(e,r,n,t){return a(e,r,n,t)||c(e,r,n,t)};r.default=function(e,r,n){var s,l=e[r],f=t.key2pos(r);switch(l.role){case"pawn":s=function(e){return function(r,n,t,i){return o(r,t)<2&&("white"===e?i===n+1||n<=2&&i===n+2&&r===t:i===n-1||n>=7&&i===n-2&&r===t)}}(l.color);break;case"knight":s=i;break;case"bishop":s=a;break;case"rook":s=c;break;case"queen":s=u;break;case"king":s=function(e,r,n){return function(i,a,c,u){return o(i,c)<2&&o(a,u)<2||n&&a===u&&a===("white"===e?1:8)&&(5===i&&(3===c||7===c)||t.containsX(r,c))}}(l.color,function(e,r){var n;return Object.keys(e).filter(function(t){return(n=e[t])&&n.color===r&&"rook"===n.role}).map(function(e){return t.key2pos(e)[0]})}(e,l.color),n)}return t.allKeys.map(t.key2pos).filter(function(e){return(f[0]!==e[0]||f[1]!==e[1])&&s(f[0],f[1],e[0],e[1])}).map(t.pos2key)}},function(e,r,n){"use strict";function t(e,r){e.exploding&&(r?e.exploding.stage=r:e.exploding=void 0,e.dom.redraw())}Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(e,r){e.exploding={stage:1,keys:r},e.dom.redraw(),setTimeout(function(){t(e,2),setTimeout(function(){return t(e,void 0)},120)},120)}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(3),o=n(0);r.defaults=function(){return{pieces:t.read(t.initial),orientation:"white",turnColor:"white",coordinates:!0,autoCastle:!0,viewOnly:!1,disableContextMenu:!1,resizable:!0,addPieceZIndex:!1,pieceKey:!1,highlight:{lastMove:!0,check:!0},animation:{enabled:!0,duration:200},movable:{free:!0,color:"both",showDests:!0,events:{},rookCastle:!0},premovable:{enabled:!0,showDests:!0,castle:!0,events:{}},predroppable:{enabled:!1,events:{}},draggable:{enabled:!0,distance:3,autoDistance:!0,centerPiece:!0,showGhost:!0,deleteOnDropOff:!1},selectable:{enabled:!0},stats:{dragged:!("ontouchstart"in window)},events:{},drawable:{enabled:!0,visible:!0,eraseOnClick:!0,shapes:[],autoShapes:[],brushes:{green:{key:"g",color:"#15781B",opacity:1,lineWidth:10},red:{key:"r",color:"#882020",opacity:1,lineWidth:10},blue:{key:"b",color:"#003088",opacity:1,lineWidth:10},yellow:{key:"y",color:"#e68f00",opacity:1,lineWidth:10},paleBlue:{key:"pb",color:"#003088",opacity:.4,lineWidth:15},paleGreen:{key:"pg",color:"#15781B",opacity:.4,lineWidth:15},paleRed:{key:"pr",color:"#882020",opacity:.4,lineWidth:15},paleGrey:{key:"pgr",color:"#4a4a4a",opacity:.35,lineWidth:15}},pieces:{baseUrl:"https://lichess1.org/assets/piece/cburnett/"},prevSvgHash:""},hold:o.timer()}}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0),o=n(2),i=n(8);function a(e,r){var n,o=t.createEl("coords",r);for(var i in e)(n=t.createEl("coord")).textContent=e[i],o.appendChild(n);return o}r.default=function(e,r,n){e.innerHTML="",e.classList.add("cg-board-wrap"),t.colors.forEach(function(n){e.classList.toggle("orientation-"+n,r.orientation===n)}),e.classList.toggle("manipulable",!r.viewOnly);var c,u,s=t.createEl("div","cg-board");if(e.appendChild(s),r.drawable.visible&&n&&((c=i.createElement("svg")).appendChild(i.createElement("defs")),e.appendChild(c)),r.coordinates){var l="black"===r.orientation?" black":"";e.appendChild(a(o.ranks,"ranks"+l)),e.appendChild(a(o.files,"files"+l))}return n&&r.draggable.showGhost&&(u=t.createEl("piece","ghost"),t.setVisible(u,!1),e.appendChild(u)),{board:s,ghost:u,svg:c}}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(6),o=n(7),i=n(0);function a(e,r,n,t){return e.addEventListener(r,n,t),function(){return e.removeEventListener(r,n)}}function c(e,r,n){return function(t){t.shiftKey||i.isRightButton(t)?e.drawable.enabled&&n(e,t):e.viewOnly||r(e,t)}}r.bindBoard=function(e){if(!e.viewOnly){var r=e.dom.elements.board,n=function(e){return function(r){e.draggable.current?t.cancel(e):e.drawable.current?o.cancel(e):r.shiftKey||i.isRightButton(r)?e.drawable.enabled&&o.start(e,r):e.viewOnly||t.start(e,r)}}(e);r.addEventListener("touchstart",n),r.addEventListener("mousedown",n),(e.disableContextMenu||e.drawable.enabled)&&r.addEventListener("contextmenu",function(e){return e.preventDefault()})}},r.bindDocument=function(e,r){var n=[];!e.dom.relative&&e.resizable&&n.push(a(document.body,"chessground.resize",function(){e.dom.bounds.clear(),i.raf(r)}));if(!e.viewOnly){var u=c(e,t.move,o.move),s=c(e,t.end,o.end);["touchmove","mousemove"].forEach(function(e){return n.push(a(document,e,u))}),["touchend","mouseup"].forEach(function(e){return n.push(a(document,e,s))});var l=function(){return e.dom.bounds.clear()};n.push(a(window,"scroll",l,{passive:!0})),n.push(a(window,"resize",l,{passive:!0}))}return function(){return n.forEach(function(e){return e()})}}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0),o=n(0);function i(e){return"PIECE"===e.tagName}function a(e){return"SQUARE"===e.tagName}function c(e,r){for(var n in r)e.dom.elements.board.removeChild(r[n])}function u(e,r){var n=2+8*(e[1]-1)+(8-e[0]);return r&&(n=67-n),n+""}function s(e){return e.color+" "+e.role}function l(e,r,n){e[r]?e[r]+=" "+n:e[r]=n}r.default=function(e){var r,n,f,d,p,v,g,h,b,m,y,w="white"===e.orientation,k=e.dom.relative?o.posToTranslateRel:o.posToTranslateAbs(e.dom.bounds()),P=e.dom.relative?o.translateRel:o.translateAbs,E=e.dom.elements.board,_=e.pieces,C=e.animation.current,S=C?C.plan.anims:{},A=C?C.plan.fadings:{},O=e.draggable.current,T=function(e){var r,n,t={};if(e.lastMove&&e.highlight.lastMove)for(r in e.lastMove)l(t,e.lastMove[r],"last-move");if(e.check&&e.highlight.check&&l(t,e.check,"check"),e.selected&&(l(t,e.selected,"selected"),e.movable.showDests)){var o=e.movable.dests&&e.movable.dests[e.selected];if(o)for(r in o)n=o[r],l(t,n,"move-dest"+(e.pieces[n]?" oc":""));var i=e.premovable.dests;if(i)for(r in i)n=i[r],l(t,n,"premove-dest"+(e.pieces[n]?" oc":""))}var a=e.premovable.current;if(a)for(r in a)l(t,a[r],"current-premove");else e.predroppable.current&&l(t,e.predroppable.current.key,"current-premove");var c=e.exploding;if(c)for(r in c.keys)l(t,c.keys[r],"exploding"+c.stage);return t}(e),I={},M={},L={},D={},N=Object.keys(_);for(f=E.firstChild;f;){if(r=f.cgKey,i(f))d=_[r],v=S[r],g=A[r],p=f.cgPiece,!f.cgDragging||O&&O.orig===r||(f.classList.remove("dragging"),P(f,k(t.key2pos(r),w)),f.cgDragging=!1),!g&&f.cgFading&&(f.cgFading=!1,f.classList.remove("fading")),d?(v&&f.cgAnimating&&p===s(d)?((B=t.key2pos(r))[0]+=v[2],B[1]+=v[3],f.classList.add("anim"),P(f,k(B,w))):f.cgAnimating&&(f.cgAnimating=!1,f.classList.remove("anim"),P(f,k(t.key2pos(r),w)),e.addPieceZIndex&&(f.style.zIndex=u(t.key2pos(r),w))),p!==s(d)||g&&f.cgFading?g&&p===s(g)?(f.classList.add("fading"),f.cgFading=!0):L[p]?L[p].push(f):L[p]=[f]:I[r]=!0):L[p]?L[p].push(f):L[p]=[f];else if(a(f)){var K=f.className;T[r]===K?M[r]=!0:D[K]?D[K].push(f):D[K]=[f]}f=f.nextSibling}for(var x in T)if(!M[x]){y=(m=D[T[x]])&&m.pop();var R=k(t.key2pos(x),w);if(y)y.cgKey=x,P(y,R);else{var q=t.createEl("square",T[x]);q.cgKey=x,P(q,R),E.insertBefore(q,E.firstChild)}}for(var j in N)if(n=_[r=N[j]],v=S[r],!I[r])if(b=(h=L[s(n)])&&h.pop()){b.cgKey=r,b.cgFading&&(b.classList.remove("fading"),b.cgFading=!1);var B=t.key2pos(r);e.addPieceZIndex&&(b.style.zIndex=u(B,w)),v&&(b.cgAnimating=!0,b.classList.add("anim"),B[0]+=v[2],B[1]+=v[3]),P(b,k(B,w))}else{var U=s(n),Q=t.createEl("piece",U);B=t.key2pos(r),Q.cgPiece=U,Q.cgKey=r,v&&(Q.cgAnimating=!0,B[0]+=v[2],B[1]+=v[3]),P(Q,k(B,w)),e.addPieceZIndex&&(Q.style.zIndex=u(B,w)),E.appendChild(Q)}for(var W in L)c(e,L[W]);for(var W in D)c(e,D[W])}},function(e,r,n){var t,o=function(e){var r="b",n="w",t=-1,o="p",i="n",a="b",c="r",u="q",s="k",l="pnbrqkPNBRQK",f="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",d=["1-0","0-1","1/2-1/2","*"],p={b:[16,32,17,15],w:[-16,-32,-17,-15]},v={n:[-18,-33,-31,-14,18,33,31,14],b:[-17,-15,17,15],r:[-16,1,16,-1],q:[-17,-16,-15,1,17,16,15,-1],k:[-17,-16,-15,1,17,16,15,-1]},g=[20,0,0,0,0,0,0,24,0,0,0,0,0,0,20,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,24,24,24,24,24,24,56,0,56,24,24,24,24,24,24,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,20,0,0,0,0,0,0,24,0,0,0,0,0,0,20],h=[17,0,0,0,0,0,0,16,0,0,0,0,0,0,15,0,0,17,0,0,0,0,0,16,0,0,0,0,0,15,0,0,0,0,17,0,0,0,0,16,0,0,0,0,15,0,0,0,0,0,0,17,0,0,0,16,0,0,0,15,0,0,0,0,0,0,0,0,17,0,0,16,0,0,15,0,0,0,0,0,0,0,0,0,0,17,0,16,0,15,0,0,0,0,0,0,0,0,0,0,0,0,17,16,15,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-15,-16,-17,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,-16,0,-17,0,0,0,0,0,0,0,0,0,0,-15,0,0,-16,0,0,-17,0,0,0,0,0,0,0,0,-15,0,0,0,-16,0,0,0,-17,0,0,0,0,0,0,-15,0,0,0,0,-16,0,0,0,0,-17,0,0,0,0,-15,0,0,0,0,0,-16,0,0,0,0,0,-17,0,0,-15,0,0,0,0,0,0,-16,0,0,0,0,0,0,-17],b={p:0,n:1,b:2,r:3,q:4,k:5},m={NORMAL:"n",CAPTURE:"c",BIG_PAWN:"b",EP_CAPTURE:"e",PROMOTION:"p",KSIDE_CASTLE:"k",QSIDE_CASTLE:"q"},y={NORMAL:1,CAPTURE:2,BIG_PAWN:4,EP_CAPTURE:8,PROMOTION:16,KSIDE_CASTLE:32,QSIDE_CASTLE:64},w=7,k=6,P=1,E=0,_={a8:0,b8:1,c8:2,d8:3,e8:4,f8:5,g8:6,h8:7,a7:16,b7:17,c7:18,d7:19,e7:20,f7:21,g7:22,h7:23,a6:32,b6:33,c6:34,d6:35,e6:36,f6:37,g6:38,h6:39,a5:48,b5:49,c5:50,d5:51,e5:52,f5:53,g5:54,h5:55,a4:64,b4:65,c4:66,d4:67,e4:68,f4:69,g4:70,h4:71,a3:80,b3:81,c3:82,d3:83,e3:84,f3:85,g3:86,h3:87,a2:96,b2:97,c2:98,d2:99,e2:100,f2:101,g2:102,h2:103,a1:112,b1:113,c1:114,d1:115,e1:116,f1:117,g1:118,h1:119},C={w:[{square:_.a1,flag:y.QSIDE_CASTLE},{square:_.h1,flag:y.KSIDE_CASTLE}],b:[{square:_.a8,flag:y.QSIDE_CASTLE},{square:_.h8,flag:y.KSIDE_CASTLE}]},S=new Array(128),A={w:t,b:t},O=n,T={w:0,b:0},I=t,M=0,L=1,D=[],N={};function K(){S=new Array(128),A={w:t,b:t},O=n,T={w:0,b:0},I=t,M=0,L=1,D=[],N={},U(j())}function x(){R(f)}function R(e){var o=e.split(/\s+/),i=o[0],a=0;if(!q(e).valid)return!1;K();for(var c=0;c<i.length;c++){var u=i.charAt(c);if("/"===u)a+=8;else if(ue(u))a+=parseInt(u,10);else{var s=u<"a"?n:r;W({type:u.toLowerCase(),color:s},ae(a)),a++}}return O=o[1],o[2].indexOf("K")>-1&&(T.w|=y.KSIDE_CASTLE),o[2].indexOf("Q")>-1&&(T.w|=y.QSIDE_CASTLE),o[2].indexOf("k")>-1&&(T.b|=y.KSIDE_CASTLE),o[2].indexOf("q")>-1&&(T.b|=y.QSIDE_CASTLE),I="-"===o[3]?t:_[o[3]],M=parseInt(o[4],10),L=parseInt(o[5],10),U(j()),!0}function q(e){var r="No errors.",n="FEN string must contain six space-delimited fields.",t="6th field (move number) must be a positive integer.",o="5th field (half move counter) must be a non-negative integer.",i="4th field (en-passant square) is invalid.",a="3rd field (castling availability) is invalid.",c="2nd field (side to move) is invalid.",u="1st field (piece positions) does not contain 8 '/'-delimited rows.",s="1st field (piece positions) is invalid [consecutive numbers].",l="1st field (piece positions) is invalid [invalid piece].",f="1st field (piece positions) is invalid [row too large].",d="Illegal en-passant square",p=e.split(/\s+/);if(6!==p.length)return{valid:!1,error_number:1,error:n};if(isNaN(p[5])||parseInt(p[5],10)<=0)return{valid:!1,error_number:2,error:t};if(isNaN(p[4])||parseInt(p[4],10)<0)return{valid:!1,error_number:3,error:o};if(!/^(-|[abcdefgh][36])$/.test(p[3]))return{valid:!1,error_number:4,error:i};if(!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(p[2]))return{valid:!1,error_number:5,error:a};if(!/^(w|b)$/.test(p[1]))return{valid:!1,error_number:6,error:c};var v=p[0].split("/");if(8!==v.length)return{valid:!1,error_number:7,error:u};for(var g=0;g<v.length;g++){for(var h=0,b=!1,m=0;m<v[g].length;m++)if(isNaN(v[g][m])){if(!/^[prnbqkPRNBQK]$/.test(v[g][m]))return{valid:!1,error_number:9,error:l};h+=1,b=!1}else{if(b)return{valid:!1,error_number:8,error:s};h+=parseInt(v[g][m],10),b=!0}if(8!==h)return{valid:!1,error_number:10,error:f}}return"3"==p[3][1]&&"w"==p[1]||"6"==p[3][1]&&"b"==p[1]?{valid:!1,error_number:11,error:d}:{valid:!0,error_number:0,error:r}}function j(){for(var e=0,o="",i=_.a8;i<=_.h1;i++){if(null==S[i])e++;else{e>0&&(o+=e,e=0);var a=S[i].color,c=S[i].type;o+=a===n?c.toUpperCase():c.toLowerCase()}i+1&136&&(e>0&&(o+=e),i!==_.h1&&(o+="/"),e=0,i+=8)}var u="";T[n]&y.KSIDE_CASTLE&&(u+="K"),T[n]&y.QSIDE_CASTLE&&(u+="Q"),T[r]&y.KSIDE_CASTLE&&(u+="k"),T[r]&y.QSIDE_CASTLE&&(u+="q"),u=u||"-";var s=I===t?"-":ae(I);return[o,O,u,s,M,L].join(" ")}function B(e){for(var r=0;r<e.length;r+=2)"string"==typeof e[r]&&"string"==typeof e[r+1]&&(N[e[r]]=e[r+1]);return N}function U(e){D.length>0||(e!==f?(N.SetUp="1",N.FEN=e):(delete N.SetUp,delete N.FEN))}function Q(e){var r=S[_[e]];return r?{type:r.type,color:r.color}:null}function W(e,r){if(!("type"in e&&"color"in e))return!1;if(-1===l.indexOf(e.type.toLowerCase()))return!1;if(!(r in _))return!1;var n=_[r];return(e.type!=s||A[e.color]==t||A[e.color]==n)&&(S[n]={type:e.type,color:e.color},e.type===s&&(A[e.color]=n),U(j()),!0)}function F(e,r,n,t,i){var a={color:O,from:r,to:n,flags:t,piece:e[r].type};return i&&(a.flags|=y.PROMOTION,a.promotion=i),e[n]?a.captured=e[n].type:t&y.EP_CAPTURE&&(a.captured=o),a}function $(e){function r(e,r,n,t,s){if(e[n].type!==o||oe(t)!==E&&oe(t)!==w)r.push(F(e,n,t,s));else for(var l=[u,c,a,i],f=0,d=l.length;f<d;f++)r.push(F(e,n,t,s,l[f]))}var n=[],t=O,s=ce(t),l={b:P,w:k},f=_.a8,d=_.h1,g=!1,h=!(void 0!==e&&"legal"in e)||e.legal;if(void 0!==e&&"square"in e){if(!(e.square in _))return[];f=d=_[e.square],g=!0}for(var b=f;b<=d;b++)if(136&b)b+=7;else{var m=S[b];if(null!=m&&m.color===t)if(m.type===o){var C=b+p[t][0];if(null==S[C]){r(S,n,b,C,y.NORMAL);C=b+p[t][1];l[t]===oe(b)&&null==S[C]&&r(S,n,b,C,y.BIG_PAWN)}for(M=2;M<4;M++){136&(C=b+p[t][M])||(null!=S[C]&&S[C].color===s?r(S,n,b,C,y.CAPTURE):C===I&&r(S,n,b,I,y.EP_CAPTURE))}}else for(var M=0,L=v[m.type].length;M<L;M++){var D=v[m.type][M];for(C=b;!(136&(C+=D));){if(null!=S[C]){if(S[C].color===t)break;r(S,n,b,C,y.CAPTURE);break}if(r(S,n,b,C,y.NORMAL),"n"===m.type||"k"===m.type)break}}}if(!g||d===A[t]){if(T[t]&y.KSIDE_CASTLE){var N=(K=A[t])+2;null!=S[K+1]||null!=S[N]||X(s,A[t])||X(s,K+1)||X(s,N)||r(S,n,A[t],N,y.KSIDE_CASTLE)}if(T[t]&y.QSIDE_CASTLE){var K;N=(K=A[t])-2;null!=S[K-1]||null!=S[K-2]||null!=S[K-3]||X(s,A[t])||X(s,K-1)||X(s,N)||r(S,n,A[t],N,y.QSIDE_CASTLE)}}if(!h)return n;var x=[];for(b=0,L=n.length;b<L;b++)re(n[b]),z(t)||x.push(n[b]),ne();return x}function G(e,r){var n="";if(e.flags&y.KSIDE_CASTLE)n="O-O";else if(e.flags&y.QSIDE_CASTLE)n="O-O-O";else{var t=function(e,r){for(var n=$({legal:!r}),t=e.from,o=e.to,i=e.piece,a=0,c=0,u=0,s=0,l=n.length;s<l;s++){var f=n[s].from,d=n[s].to,p=n[s].piece;i===p&&t!==f&&o===d&&(a++,oe(t)===oe(f)&&c++,ie(t)===ie(f)&&u++)}if(a>0)return c>0&&u>0?ae(t):u>0?ae(t).charAt(1):ae(t).charAt(0);return""}(e,r);e.piece!==o&&(n+=e.piece.toUpperCase()+t),e.flags&(y.CAPTURE|y.EP_CAPTURE)&&(e.piece===o&&(n+=ae(e.from)[0]),n+="x"),n+=ae(e.to),e.flags&y.PROMOTION&&(n+="="+e.promotion.toUpperCase())}return re(e),Z()&&(V()?n+="#":n+="+"),ne(),n}function H(e){return e.replace(/=/,"").replace(/[+#]?[?!]*$/,"")}function X(e,t){for(var i=_.a8;i<=_.h1;i++)if(136&i)i+=7;else if(null!=S[i]&&S[i].color===e){var a=S[i],c=i-t,u=c+119;if(g[u]&1<<b[a.type]){if(a.type===o){if(c>0){if(a.color===n)return!0}else if(a.color===r)return!0;continue}if("n"===a.type||"k"===a.type)return!0;for(var s=h[u],l=i+s,f=!1;l!==t;){if(null!=S[l]){f=!0;break}l+=s}if(!f)return!0}}return!1}function z(e){return X(ce(e),A[e])}function Z(){return z(O)}function V(){return Z()&&0===$().length}function Y(){return!Z()&&0===$().length}function J(){for(var e={},r=[],n=0,t=0,o=_.a8;o<=_.h1;o++)if(t=(t+1)%2,136&o)o+=7;else{var c=S[o];c&&(e[c.type]=c.type in e?e[c.type]+1:1,c.type===a&&r.push(t),n++)}if(2===n)return!0;if(3===n&&(1===e[a]||1===e[i]))return!0;if(n===e[a]+2){var u=0,s=r.length;for(o=0;o<s;o++)u+=r[o];if(0===u||u===s)return!0}return!1}function ee(){for(var e=[],r={},n=!1;;){var t=ne();if(!t)break;e.push(t)}for(;;){var o=j().split(" ").slice(0,4).join(" ");if(r[o]=o in r?r[o]+1:1,r[o]>=3&&(n=!0),!e.length)break;re(e.pop())}return n}function re(e){var n=O,i=ce(n);if(function(e){D.push({move:e,kings:{b:A.b,w:A.w},turn:O,castling:{b:T.b,w:T.w},ep_square:I,half_moves:M,move_number:L})}(e),S[e.to]=S[e.from],S[e.from]=null,e.flags&y.EP_CAPTURE&&(O===r?S[e.to-16]=null:S[e.to+16]=null),e.flags&y.PROMOTION&&(S[e.to]={type:e.promotion,color:n}),S[e.to].type===s){if(A[S[e.to].color]=e.to,e.flags&y.KSIDE_CASTLE){var a=e.to-1,c=e.to+1;S[a]=S[c],S[c]=null}else if(e.flags&y.QSIDE_CASTLE){a=e.to+1,c=e.to-2;S[a]=S[c],S[c]=null}T[n]=""}if(T[n])for(var u=0,l=C[n].length;u<l;u++)if(e.from===C[n][u].square&&T[n]&C[n][u].flag){T[n]^=C[n][u].flag;break}if(T[i])for(u=0,l=C[i].length;u<l;u++)if(e.to===C[i][u].square&&T[i]&C[i][u].flag){T[i]^=C[i][u].flag;break}I=e.flags&y.BIG_PAWN?"b"===O?e.to-16:e.to+16:t,e.piece===o?M=0:e.flags&(y.CAPTURE|y.EP_CAPTURE)?M=0:M++,O===r&&L++,O=ce(O)}function ne(){var e=D.pop();if(null==e)return null;var n=e.move;A=e.kings,O=e.turn,T=e.castling,I=e.ep_square,M=e.half_moves,L=e.move_number;var t,i,a=O,c=ce(O);if(S[n.from]=S[n.to],S[n.from].type=n.piece,S[n.to]=null,n.flags&y.CAPTURE)S[n.to]={type:n.captured,color:c};else if(n.flags&y.EP_CAPTURE){var u;u=a===r?n.to-16:n.to+16,S[u]={type:o,color:c}}n.flags&(y.KSIDE_CASTLE|y.QSIDE_CASTLE)&&(n.flags&y.KSIDE_CASTLE?(t=n.to+1,i=n.to-1):n.flags&y.QSIDE_CASTLE&&(t=n.to-2,i=n.to+1),S[t]=S[i],S[i]=null);return n}function te(e,r){var n=H(e);if(r){var t=n.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);if(t)var o=t[1],i=t[2],a=t[3],c=t[4]}for(var u=$(),s=0,l=u.length;s<l;s++){if(n===H(G(u[s]))||r&&n===H(G(u[s],!0)))return u[s];if(t&&(!o||o.toLowerCase()==u[s].piece)&&_[i]==u[s].from&&_[a]==u[s].to&&(!c||c.toLowerCase()==u[s].promotion))return u[s]}return null}function oe(e){return e>>4}function ie(e){return 15&e}function ae(e){var r=ie(e),n=oe(e);return"abcdefgh".substring(r,r+1)+"87654321".substring(n,n+1)}function ce(e){return e===n?r:n}function ue(e){return-1!=="0123456789".indexOf(e)}function se(e){var r=function e(r){var n=r instanceof Array?[]:{};for(var t in r)n[t]="object"==typeof t?e(r[t]):r[t];return n}(e);r.san=G(r,!1),r.to=ae(r.to),r.from=ae(r.from);var n="";for(var t in y)y[t]&r.flags&&(n+=m[t]);return r.flags=n,r}function le(e){return e.replace(/^\s+|\s+$/g,"")}return R(void 0===e?f:e),{WHITE:n,BLACK:r,PAWN:o,KNIGHT:i,BISHOP:a,ROOK:c,QUEEN:u,KING:s,SQUARES:function(){for(var e=[],r=_.a8;r<=_.h1;r++)136&r?r+=7:e.push(ae(r));return e}(),FLAGS:m,load:function(e){return R(e)},reset:function(){return x()},moves:function(e){for(var r=$(e),n=[],t=0,o=r.length;t<o;t++)void 0!==e&&"verbose"in e&&e.verbose?n.push(se(r[t])):n.push(G(r[t],!1));return n},in_check:function(){return Z()},in_checkmate:function(){return V()},in_stalemate:function(){return Y()},in_draw:function(){return M>=100||Y()||J()||ee()},insufficient_material:function(){return J()},in_threefold_repetition:function(){return ee()},game_over:function(){return M>=100||V()||Y()||J()||ee()},validate_fen:function(e){return q(e)},fen:function(){return j()},pgn:function(e){var r="object"==typeof e&&"string"==typeof e.newline_char?e.newline_char:"\n",n="object"==typeof e&&"number"==typeof e.max_width?e.max_width:0,t=[],o=!1;for(var i in N)t.push("["+i+' "'+N[i]+'"]'+r),o=!0;o&&D.length&&t.push(r);for(var a=[];D.length>0;)a.push(ne());for(var c=[],u="";a.length>0;){var s=a.pop();D.length||"b"!==s.color?"w"===s.color&&(u.length&&c.push(u),u=L+"."):u=L+". ...",u=u+" "+G(s,!1),re(s)}if(u.length&&c.push(u),void 0!==N.Result&&c.push(N.Result),0===n)return t.join("")+c.join(" ");var l=0;for(i=0;i<c.length;i++)l+c[i].length>n&&0!==i?(" "===t[t.length-1]&&t.pop(),t.push(r),l=0):0!==i&&(t.push(" "),l++),t.push(c[i]),l+=c[i].length;return t.join("")},load_pgn:function(e,r){var n=void 0!==r&&"sloppy"in r&&r.sloppy;function t(e){return e.replace(/\\/g,"\\")}var o="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",i=new RegExp("^(\\[(.|"+t(o)+")*\\])("+t(o)+")*1.("+t(o)+"|.)*$","g"),a=e.replace(i,"$1");"["!==a[0]&&(a=""),x();var c=function(e,r){for(var n="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",o={},i=e.split(new RegExp(t(n))),a="",c="",u=0;u<i.length;u++)a=i[u].replace(/^\[([A-Z][A-Za-z]*)\s.*\]$/,"$1"),c=i[u].replace(/^\[[A-Za-z]+\s"(.*)"\]$/,"$1"),le(a).length>0&&(o[a]=c);return o}(a,r);for(var u in c)B([u,c[u]]);if("1"===c.SetUp&&!("FEN"in c&&R(c.FEN)))return!1;var s=e.replace(a,"").replace(new RegExp(t(o),"g")," ");s=s.replace(/(\{[^}]+\})+?/g,"");for(var l=/(\([^\(\)]+\))+?/g;l.test(s);)s=s.replace(l,"");var f=le(s=(s=(s=s.replace(/\d+\.(\.\.)?/g,"")).replace(/\.\.\./g,"")).replace(/\$\d+/g,"")).split(new RegExp(/\s+/));f=f.join(",").replace(/,,+/g,",").split(",");for(var p="",v=0;v<f.length-1;v++){if(null==(p=te(f[v],n)))return!1;re(p)}if(p=f[f.length-1],d.indexOf(p)>-1)(function(e){for(var r in e)return!0;return!1})(N)&&void 0===N.Result&&B(["Result",p]);else{if(null==(p=te(p,n)))return!1;re(p)}return!0},header:function(){return B(arguments)},ascii:function(){return function(){for(var e="   +------------------------+\n",r=_.a8;r<=_.h1;r++){if(0===ie(r)&&(e+=" "+"87654321"[oe(r)]+" |"),null==S[r])e+=" . ";else{var t=S[r].type;e+=" "+(S[r].color===n?t.toUpperCase():t.toLowerCase())+" "}r+1&136&&(e+="|\n",r+=8)}return e+="   +------------------------+\n",e+="     a  b  c  d  e  f  g  h\n"}()},turn:function(){return O},move:function(e,r){var n=void 0!==r&&"sloppy"in r&&r.sloppy,t=null;if("string"==typeof e)t=te(e,n);else if("object"==typeof e)for(var o=$(),i=0,a=o.length;i<a;i++)if(!(e.from!==ae(o[i].from)||e.to!==ae(o[i].to)||"promotion"in o[i]&&e.promotion!==o[i].promotion)){t=o[i];break}if(!t)return null;var c=se(t);return re(t),c},undo:function(){var e=ne();return e?se(e):null},clear:function(){return K()},put:function(e,r){return W(e,r)},get:function(e){return Q(e)},remove:function(e){return function(e){var r=Q(e);return S[_[e]]=null,r&&r.type===s&&(A[r.color]=t),U(j()),r}(e)},perft:function(e){return function e(r){for(var n=$({legal:!1}),t=0,o=O,i=0,a=n.length;i<a;i++)re(n[i]),z(o)||(r-1>0?t+=e(r-1):t++),ne();return t}(e)},square_color:function(e){if(e in _){var r=_[e];return(oe(r)+ie(r))%2==0?"light":"dark"}return null},history:function(e){for(var r=[],n=[],t=(void 0!==e&&"verbose"in e&&e.verbose);D.length>0;)r.push(ne());for(;r.length>0;){var o=r.pop();t?n.push(se(o)):n.push(G(o)),re(o)}return n}}};
/* @license
 * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)
 * Released under the BSD license
 * https://github.com/jhlywa/chess.js/blob/master/LICENSE
 */r.Chess=o,void 0===(t=function(){return o}.call(r,n,r,e))||(e.exports=t)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,